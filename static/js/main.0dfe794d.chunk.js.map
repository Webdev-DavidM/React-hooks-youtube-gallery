{"version":3,"sources":["Video.js","Videos.js","ModalWindow.js","ModalBackGround.js","App.js","config/apiKey.js","serviceWorker.js","index.js"],"names":["Video","onClick","img","title","id","className","src","alt","Videos","videoData","play","video","length","map","index","key","snippet","thumbnails","standard","url","ModalWindow","props","videoId","opts","height","width","playerVars","autoplay","onReady","e","target","playVideo","ModalBackGround","closeModal","App","useState","playlistVideos","setPaylistVideos","currentVideo","setCurrentVideo","showModal","setModal","useEffect","a","fetch","response","json","items","console","log","error","errors","message","fetchData","contentDetails","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"kUAEe,SAASA,EAAT,GAA6C,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,MAAOC,EAAM,EAANA,GACnD,OACE,oCACE,yBAAKC,UAAU,QAAQJ,QAAS,kBAAMA,EAAQG,KAC5C,yBAAKE,IAAKJ,EAAKK,IAAI,KACnB,4BAAKJ,KCJE,SAASK,EAAT,GAAsC,IAApBC,EAAmB,EAAnBA,UAAWC,EAAQ,EAARA,KACtCC,EAAQF,EAiBZ,OAfEE,EADEF,EAAUG,OAAS,EACbH,EAAUI,KAAI,SAACF,EAAOG,GAC5B,OACE,kBAACd,EAAD,CACEe,IAAKD,EACLV,GAAIU,EACJb,QAAS,kBAAMS,EAAKI,IACpBX,MAAOQ,EAAMK,QAAQb,MACrBD,IAAKS,EAAMK,QAAQC,WAAWC,SAASC,SAKrC,KAGH,kBAAC,WAAD,KAAWR,G,iBClBL,SAASS,EAAYC,GAalC,OACE,yBAAKhB,UAAU,SACb,kBAAC,IAAD,CACEiB,QAASD,EAAMC,QACfC,KAZO,CACXC,OAAQ,OACRC,MAAO,OACPC,WAAY,CACVC,SAAU,IASRC,QAAS,SAACC,GAAD,OAjBG,SAACA,GACjBA,EAAEC,OAAOC,YAgBWA,CAAUF,OCjBnB,SAASG,EAAgBX,GACtC,OACE,yBAAKhB,UAAU,mBAAmBJ,QAASoB,EAAMY,YAC/C,kBAACb,EAAD,CAAaE,QAASD,EAAMC,WC+CnBY,MAhDf,WAAgB,IAAD,EAC8BC,mBAAS,IADvC,mBACNC,EADM,KACUC,EADV,OAE2BF,mBAAS,IAFpC,mBAENG,EAFM,KAEQC,EAFR,OAGiBJ,oBAAS,GAH1B,mBAGNK,EAHM,KAGKC,EAHL,KAkCb,OAhBAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,+EAEOC,MAAM,gKAAD,OC3BZ,4CDyBA,cAEVC,EAFU,gBAKGA,EAASC,OALZ,OAKdD,EALc,OAOdR,EAAiBQ,EAASE,OAPZ,kDASdC,QAAQC,IAAI,KAAMC,MAAMC,OAAOC,SATjB,0DAAH,qDAYfC,KACC,IAGD,6BACGb,GACC,kBAACR,EAAD,CAAiBV,QAASgB,EAAcL,WAhC3B,WACjBQ,GAAS,MAiCP,yBAAKpC,UAAU,OACb,yBAAKA,UAAU,kBACb,kBAACG,EAAD,CAAQC,UAAW2B,EAAgB1B,KA9BzB,SAACI,GACjB,IAAIQ,EAAUc,EAAetB,GAAOwC,eAAehC,QACnDiB,EAAgBjB,GAChBmB,GAAS,UEROc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArB,GACLF,QAAQE,MAAMA,EAAME,c","file":"static/js/main.0dfe794d.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Video({ onClick, img, title, id }) {\n  return (\n    <>\n      <div className=\"video\" onClick={() => onClick(id)}>\n        <img src={img} alt=\"\" />\n        <h4>{title}</h4>\n      </div>\n    </>\n  );\n}\n","import React, { Fragment } from 'react';\nimport Video from './Video';\n\nexport default function Videos({ videoData, play }) {\n  let video = videoData;\n  if (videoData.length > 1) {\n    video = videoData.map((video, index) => {\n      return (\n        <Video\n          key={index}\n          id={index}\n          onClick={() => play(index)}\n          title={video.snippet.title}\n          img={video.snippet.thumbnails.standard.url}\n        />\n      );\n    });\n  } else {\n    video = null;\n  }\n\n  return <Fragment>{video}</Fragment>;\n}\n","import React from 'react';\nimport Player from 'react-youtube';\n\nexport default function ModalWindow(props) {\n  const playVideo = (e) => {\n    e.target.playVideo();\n  };\n\n  const opts = {\n    height: '100%',\n    width: '100%',\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  return (\n    <div className=\"modal\">\n      <Player\n        videoId={props.videoId}\n        opts={opts}\n        onReady={(e) => playVideo(e)}\n      />\n    </div>\n  );\n}\n","import React from 'react';\n\nimport ModalWindow from './ModalWindow';\n\nexport default function ModalBackGround(props) {\n  return (\n    <div className=\"modal-background\" onClick={props.closeModal}>\n      <ModalWindow videoId={props.videoId} />\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport Videos from './Videos';\nimport './App.css';\nimport { apiKey } from './config/apiKey.js';\nimport ModalBackGround from './ModalBackGround';\n\nfunction App() {\n  const [playlistVideos, setPaylistVideos] = useState({});\n  const [currentVideo, setCurrentVideo] = useState('');\n  const [showModal, setModal] = useState(false);\n\n  const closeModal = () => {\n    setModal(false);\n  };\n\n  // this function below will give me access to the player wihtin state which I can use to play the video\n\n  const playVideo = (index) => {\n    let videoId = playlistVideos[index].contentDetails.videoId;\n    setCurrentVideo(videoId);\n    setModal(true);\n  };\n\n  // Here I am making the call to my youtube playlist to get the information //\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let response = await fetch(\n          `https://www.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=25&autoplay=1&playlistId=PLjaGDYrvE9VwKidNDZwcaxzLOjKfD9CjC&key=${apiKey}`\n        );\n        response = await response.json();\n\n        setPaylistVideos(response.items);\n      } catch (error) {\n        console.log(error.error.errors.message);\n      }\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      {showModal && (\n        <ModalBackGround videoId={currentVideo} closeModal={closeModal} />\n      )}\n      <div className=\"App\">\n        <div className=\"flex-container\">\n          <Videos videoData={playlistVideos} play={playVideo} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const apiKey = 'AIzaSyDlWPniIY-QyJWeCvl6mN4rl5LDc2onv6U';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}